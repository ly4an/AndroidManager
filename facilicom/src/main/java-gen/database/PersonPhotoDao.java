package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PERSON_PHOTO".
 */
public class PersonPhotoDao extends AbstractDao<PersonPhoto, Long> {

    public static final String TABLENAME = "PERSON_PHOTO";

    public PersonPhotoDao(DaoConfig config) {
        super(config);
    }


    public PersonPhotoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"PERSON_PHOTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PERSON_ID\" INTEGER," + // 1: PersonId
                "\"PERSON_LOCAL_UID\" TEXT," + // 2: PersonLocalUID
                "\"IMAGE_LOCAL_UID\" TEXT," + // 3: ImageLocalUID
                "\"PERSON_PHOTO_TYPE\" INTEGER," + // 4: PersonPhotoType
                "\"PERSON_PHOTO_URI\" TEXT);"); // 5: PersonPhotoUri
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_PHOTO\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, PersonPhoto entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long PersonId = entity.getPersonId();
        if (PersonId != null) {
            stmt.bindLong(2, PersonId);
        }

        String PersonLocalUID = entity.getPersonLocalUID();
        if (PersonLocalUID != null) {
            stmt.bindString(3, PersonLocalUID);
        }

        String ImageLocalUID = entity.getImageLocalUID();
        if (ImageLocalUID != null) {
            stmt.bindString(4, ImageLocalUID);
        }

        Integer PersonPhotoType = entity.getPersonPhotoType();
        if (PersonPhotoType != null) {
            stmt.bindLong(5, PersonPhotoType);
        }

        String PersonPhotoUri = entity.getPersonPhotoUri();
        if (PersonPhotoUri != null) {
            stmt.bindString(6, PersonPhotoUri);
        }
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, PersonPhoto entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Long PersonId = entity.getPersonId();
		if (PersonId != null) {
			stmt.bindLong(2, PersonId);
		}

		String PersonLocalUID = entity.getPersonLocalUID();
		if (PersonLocalUID != null) {
			stmt.bindString(3, PersonLocalUID);
		}

		String ImageLocalUID = entity.getImageLocalUID();
		if (ImageLocalUID != null) {
			stmt.bindString(4, ImageLocalUID);
		}

		Integer PersonPhotoType = entity.getPersonPhotoType();
		if (PersonPhotoType != null) {
			stmt.bindLong(5, PersonPhotoType);
		}

		String PersonPhotoUri = entity.getPersonPhotoUri();
		if (PersonPhotoUri != null) {
			stmt.bindString(6, PersonPhotoUri);
		}
	}

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public PersonPhoto readEntity(Cursor cursor, int offset) {
        PersonPhoto entity = new PersonPhoto( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // PersonId
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PersonLocalUID
		        cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ImageLocalUID
		        cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // PersonPhotoType
		        cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // PersonPhotoUri
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, PersonPhoto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPersonLocalUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageLocalUID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPersonPhotoType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPersonPhotoUri(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

	@Override
	protected final Long updateKeyAfterInsert(PersonPhoto entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(PersonPhoto entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(PersonPhoto entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
    }

    /**
     * Properties of entity PersonPhoto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, Long.class, "PersonId", false, "PERSON_ID");
        public final static Property PersonLocalUID = new Property(2, String.class, "PersonLocalUID", false, "PERSON_LOCAL_UID");
        public final static Property ImageLocalUID = new Property(3, String.class, "ImageLocalUID", false, "IMAGE_LOCAL_UID");
        public final static Property PersonPhotoType = new Property(4, Integer.class, "PersonPhotoType", false, "PERSON_PHOTO_TYPE");
        public final static Property PersonPhotoUri = new Property(5, String.class, "PersonPhotoUri", false, "PERSON_PHOTO_URI");
    }
    
}
