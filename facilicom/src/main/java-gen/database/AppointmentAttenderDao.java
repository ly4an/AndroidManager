package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "APPOINTMENT_ATTENDER".
 */
public class AppointmentAttenderDao extends AbstractDao<AppointmentAttender, Long> {

    public static final String TABLENAME = "APPOINTMENT_ATTENDER";
    private Query<AppointmentAttender> appointment_AttendersQuery;

    public AppointmentAttenderDao(DaoConfig config) {
        super(config);
    }

    public AppointmentAttenderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"APPOINTMENT_ATTENDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"APPOINTMENT_ID\" INTEGER," + // 1: AppointmentId
                "\"EMAIL\" TEXT);"); // 2: Email
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPOINTMENT_ATTENDER\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, AppointmentAttender entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long AppointmentId = entity.getAppointmentId();
        if (AppointmentId != null) {
            stmt.bindLong(2, AppointmentId);
        }

        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(3, Email);
        }
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, AppointmentAttender entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Long AppointmentId = entity.getAppointmentId();
		if (AppointmentId != null) {
			stmt.bindLong(2, AppointmentId);
		}

		String Email = entity.getEmail();
		if (Email != null) {
			stmt.bindString(3, Email);
		}
	}

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public AppointmentAttender readEntity(Cursor cursor, int offset) {
        AppointmentAttender entity = new AppointmentAttender( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // AppointmentId
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Email
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, AppointmentAttender entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppointmentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

	@Override
	protected final Long updateKeyAfterInsert(AppointmentAttender entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(AppointmentAttender entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(AppointmentAttender entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
	}

	/** Internal query to resolve the "Attenders" to-many relationship of Appointment. */
	public List<AppointmentAttender> _queryAppointment_Attenders(Long AppointmentId) {
        synchronized (this) {
            if (appointment_AttendersQuery == null) {
                QueryBuilder<AppointmentAttender> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AppointmentId.eq(null));
                appointment_AttendersQuery = queryBuilder.build();
            }
        }
        Query<AppointmentAttender> query = appointment_AttendersQuery.forCurrentThread();
        query.setParameter(0, AppointmentId);
        return query.list();
    }
    
    /**
     * Properties of entity AppointmentAttender.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppointmentId = new Property(1, Long.class, "AppointmentId", false, "APPOINTMENT_ID");
        public final static Property Email = new Property(2, String.class, "Email", false, "EMAIL");
    }

}
