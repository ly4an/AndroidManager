package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SERVICE_REQUEST".
 */
public class ServiceRequestDao extends AbstractDao<ServiceRequest, Long> {

    public static final String TABLENAME = "SERVICE_REQUEST";
    private DaoSession daoSession;

    public ServiceRequestDao(DaoConfig config) {
        super(config);
    }


    public ServiceRequestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"SERVICE_REQUEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID\" INTEGER," + // 1: ID
                "\"UID\" TEXT," + // 2: UID
                "\"DUE_DATE\" TEXT," + // 3: DueDate
                "\"CREATED_ON\" TEXT," + // 4: CreatedOn
                "\"FACILITY_NAME\" TEXT," + // 5: FacilityName
                "\"FACILITY_ADDRESS\" TEXT," + // 6: FacilityAddress
                "\"URGENCY_TYPE\" TEXT," + // 7: UrgencyType
                "\"STATUS\" TEXT," + // 8: Status
                "\"CONTENT\" TEXT," + // 9: Content
                "\"SERVICE_TYPE_NAME\" TEXT," + // 10: ServiceTypeName
                "\"CAN_EXECUTE\" INTEGER," + // 11: CanExecute
                "\"NEED_EVALUATE\" INTEGER," + // 12: NeedEvaluate
                "\"MINE\" INTEGER," + // 13: Mine
                "\"COMMENT\" TEXT);"); // 14: Comment
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVICE_REQUEST\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, ServiceRequest entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }

        String UID = entity.getUID();
        if (UID != null) {
            stmt.bindString(3, UID);
        }

        String DueDate = entity.getDueDate();
        if (DueDate != null) {
            stmt.bindString(4, DueDate);
        }

        String CreatedOn = entity.getCreatedOn();
        if (CreatedOn != null) {
            stmt.bindString(5, CreatedOn);
        }

        String FacilityName = entity.getFacilityName();
        if (FacilityName != null) {
            stmt.bindString(6, FacilityName);
        }

        String FacilityAddress = entity.getFacilityAddress();
        if (FacilityAddress != null) {
            stmt.bindString(7, FacilityAddress);
        }

        String UrgencyType = entity.getUrgencyType();
        if (UrgencyType != null) {
            stmt.bindString(8, UrgencyType);
        }

        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(9, Status);
        }

        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(10, Content);
        }

        String ServiceTypeName = entity.getServiceTypeName();
        if (ServiceTypeName != null) {
            stmt.bindString(11, ServiceTypeName);
        }

        Integer CanExecute = entity.getCanExecute();
        if (CanExecute != null) {
            stmt.bindLong(12, CanExecute);
        }

        Integer NeedEvaluate = entity.getNeedEvaluate();
        if (NeedEvaluate != null) {
            stmt.bindLong(13, NeedEvaluate);
        }

        Integer Mine = entity.getMine();
        if (Mine != null) {
            stmt.bindLong(14, Mine);
        }

        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(15, Comment);
        }
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, ServiceRequest entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Integer ID = entity.getID();
		if (ID != null) {
			stmt.bindLong(2, ID);
		}

		String UID = entity.getUID();
		if (UID != null) {
			stmt.bindString(3, UID);
		}

		String DueDate = entity.getDueDate();
		if (DueDate != null) {
			stmt.bindString(4, DueDate);
		}

		String CreatedOn = entity.getCreatedOn();
		if (CreatedOn != null) {
			stmt.bindString(5, CreatedOn);
		}

		String FacilityName = entity.getFacilityName();
		if (FacilityName != null) {
			stmt.bindString(6, FacilityName);
		}

		String FacilityAddress = entity.getFacilityAddress();
		if (FacilityAddress != null) {
			stmt.bindString(7, FacilityAddress);
		}

		String UrgencyType = entity.getUrgencyType();
		if (UrgencyType != null) {
			stmt.bindString(8, UrgencyType);
		}

		String Status = entity.getStatus();
		if (Status != null) {
			stmt.bindString(9, Status);
		}

		String Content = entity.getContent();
		if (Content != null) {
			stmt.bindString(10, Content);
		}

		String ServiceTypeName = entity.getServiceTypeName();
		if (ServiceTypeName != null) {
			stmt.bindString(11, ServiceTypeName);
		}

		Integer CanExecute = entity.getCanExecute();
		if (CanExecute != null) {
			stmt.bindLong(12, CanExecute);
		}

		Integer NeedEvaluate = entity.getNeedEvaluate();
		if (NeedEvaluate != null) {
			stmt.bindLong(13, NeedEvaluate);
		}

		Integer Mine = entity.getMine();
		if (Mine != null) {
			stmt.bindLong(14, Mine);
		}

		String Comment = entity.getComment();
		if (Comment != null) {
			stmt.bindString(15, Comment);
		}
	}

	@Override
	protected final void attachEntity(ServiceRequest entity) {
		super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public ServiceRequest readEntity(Cursor cursor, int offset) {
        ServiceRequest entity = new ServiceRequest( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ID
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UID
		        cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DueDate
		        cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CreatedOn
		        cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FacilityName
		        cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FacilityAddress
		        cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UrgencyType
		        cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Status
		        cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Content
		        cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ServiceTypeName
		        cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // CanExecute
		        cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // NeedEvaluate
		        cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // Mine
		        cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // Comment
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ServiceRequest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDueDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatedOn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFacilityName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFacilityAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrgencyType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setServiceTypeName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCanExecute(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setNeedEvaluate(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setMine(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setComment(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
    }

	@Override
	protected final Long updateKeyAfterInsert(ServiceRequest entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(ServiceRequest entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(ServiceRequest entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
    }

    /**
     * Properties of entity ServiceRequest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ID = new Property(1, Integer.class, "ID", false, "ID");
        public final static Property UID = new Property(2, String.class, "UID", false, "UID");
        public final static Property DueDate = new Property(3, String.class, "DueDate", false, "DUE_DATE");
        public final static Property CreatedOn = new Property(4, String.class, "CreatedOn", false, "CREATED_ON");
        public final static Property FacilityName = new Property(5, String.class, "FacilityName", false, "FACILITY_NAME");
        public final static Property FacilityAddress = new Property(6, String.class, "FacilityAddress", false, "FACILITY_ADDRESS");
        public final static Property UrgencyType = new Property(7, String.class, "UrgencyType", false, "URGENCY_TYPE");
        public final static Property Status = new Property(8, String.class, "Status", false, "STATUS");
        public final static Property Content = new Property(9, String.class, "Content", false, "CONTENT");
        public final static Property ServiceTypeName = new Property(10, String.class, "ServiceTypeName", false, "SERVICE_TYPE_NAME");
        public final static Property CanExecute = new Property(11, Integer.class, "CanExecute", false, "CAN_EXECUTE");
        public final static Property NeedEvaluate = new Property(12, Integer.class, "NeedEvaluate", false, "NEED_EVALUATE");
        public final static Property Mine = new Property(13, Integer.class, "Mine", false, "MINE");
        public final static Property Comment = new Property(14, String.class, "Comment", false, "COMMENT");
    }
    
}
