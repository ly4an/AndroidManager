package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ACT_SERVICE_TYPE".
 */
public class ActServiceTypeDao extends AbstractDao<ActServiceType, Long> {

    public static final String TABLENAME = "ACT_SERVICE_TYPE";
    private DaoSession daoSession;
    private Query<ActServiceType> client_ActServiceTypesQuery;
    private String selectDeep;

    public ActServiceTypeDao(DaoConfig config) {
        super(config);
    }

	public ActServiceTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"ACT_SERVICE_TYPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SERVICE_TYPE_ID\" TEXT," + // 1: serviceTypeId
                "\"NAME\" TEXT," + // 2: name
                "\"STATUS\" INTEGER," + // 3: status
                "\"DIRECTUM_ID\" INTEGER," + // 4: directumID
                "\"CLIENT_ID\" INTEGER);"); // 5: clientID
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACT_SERVICE_TYPE\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, ActServiceType entity) {
		stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serviceTypeId = entity.getServiceTypeId();
        if (serviceTypeId != null) {
            stmt.bindString(2, serviceTypeId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Boolean status = entity.getStatus();
		if (status != null) {
			stmt.bindLong(4, status ? 1L: 0L);
		}
 
        Long directumID = entity.getDirectumID();
        if (directumID != null) {
            stmt.bindLong(5, directumID);
        }

		Long clientID = entity.getClientID();
		if (clientID != null) {
			stmt.bindLong(6, clientID);
		}
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, ActServiceType entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String serviceTypeId = entity.getServiceTypeId();
		if (serviceTypeId != null) {
			stmt.bindString(2, serviceTypeId);
		}

		String name = entity.getName();
		if (name != null) {
			stmt.bindString(3, name);
		}

		Boolean status = entity.getStatus();
		if (status != null) {
			stmt.bindLong(4, status ? 1L : 0L);
		}

		Long directumID = entity.getDirectumID();
		if (directumID != null) {
			stmt.bindLong(5, directumID);
		}
 
        Long clientID = entity.getClientID();
        if (clientID != null) {
            stmt.bindLong(6, clientID);
        }
	}

	@Override
	protected final void attachEntity(ActServiceType entity) {
		super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ActServiceType readEntity(Cursor cursor, int offset) {
        ActServiceType entity = new ActServiceType( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serviceTypeId
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
		        cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // status
		        cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // directumID
		        cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // clientID
        );
	    return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ActServiceType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServiceTypeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setDirectumID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setClientID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
    }

	@Override
	protected final Long updateKeyAfterInsert(ActServiceType entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(ActServiceType entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(ActServiceType entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
	}

	/** Internal query to resolve the "actServiceTypes" to-many relationship of Client. */
	public List<ActServiceType> _queryClient_ActServiceTypes(Long clientID) {
        synchronized (this) {
            if (client_ActServiceTypesQuery == null) {
                QueryBuilder<ActServiceType> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ClientID.eq(null));
                client_ActServiceTypesQuery = queryBuilder.build();
            }
        }
        Query<ActServiceType> query = client_ActServiceTypesQuery.forCurrentThread();
        query.setParameter(0, clientID);
        return query.list();
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getActAccountDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getClientDao().getAllColumns());
            builder.append(" FROM ACT_SERVICE_TYPE T");
            builder.append(" LEFT JOIN ACT_ACCOUNT T0 ON T.\"DIRECTUM_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN CLIENT T1 ON T.\"CLIENT_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected ActServiceType loadCurrentDeep(Cursor cursor, boolean lock) {
        ActServiceType entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ActAccount actAccount = loadCurrentOther(daoSession.getActAccountDao(), cursor, offset);
        entity.setActAccount(actAccount);
        offset += daoSession.getActAccountDao().getAllColumns().length;

        Client client = loadCurrentOther(daoSession.getClientDao(), cursor, offset);
        entity.setClient(client);

	    return entity;
    }
    
    public ActServiceType loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

	    String[] keyArray = new String[] { key.toString() };
	    Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

	/** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
	public List<ActServiceType> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ActServiceType> list = new ArrayList<ActServiceType>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
	    return list;
    }
    
    protected List<ActServiceType> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<ActServiceType> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
    
    /**
     * Properties of entity ActServiceType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServiceTypeId = new Property(1, String.class, "serviceTypeId", false, "SERVICE_TYPE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Status = new Property(3, Boolean.class, "status", false, "STATUS");
        public final static Property DirectumID = new Property(4, Long.class, "directumID", false, "DIRECTUM_ID");
        public final static Property ClientID = new Property(5, Long.class, "clientID", false, "CLIENT_ID");
    }
 
}
