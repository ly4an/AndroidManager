package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "APPOINTMENT".
 */
public class AppointmentDao extends AbstractDao<Appointment, Long> {

    public static final String TABLENAME = "APPOINTMENT";
    private DaoSession daoSession;

    public AppointmentDao(DaoConfig config) {
        super(config);
    }


    public AppointmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"APPOINTMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SUBJECT\" TEXT," + // 1: Subject
                "\"BODY\" TEXT," + // 2: Body
                "\"START\" TEXT," + // 3: Start
                "\"END\" TEXT," + // 4: End
                "\"PLACE\" TEXT," + // 5: Place
                "\"ID\" TEXT," + // 6: ID
                "\"STATUS\" TEXT," + // 7: Status
                "\"USER_IS_OWNER\" INTEGER," + // 8: UserIsOwner
                "\"DATE\" INTEGER);"); // 9: Date
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPOINTMENT\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, Appointment entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String Subject = entity.getSubject();
        if (Subject != null) {
            stmt.bindString(2, Subject);
        }

        String Body = entity.getBody();
        if (Body != null) {
            stmt.bindString(3, Body);
        }

        String Start = entity.getStart();
        if (Start != null) {
            stmt.bindString(4, Start);
        }

        String End = entity.getEnd();
        if (End != null) {
            stmt.bindString(5, End);
        }

        String Place = entity.getPlace();
        if (Place != null) {
            stmt.bindString(6, Place);
        }

        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(7, ID);
        }

        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(8, Status);
        }

        Integer UserIsOwner = entity.getUserIsOwner();
        if (UserIsOwner != null) {
            stmt.bindLong(9, UserIsOwner);
        }

        java.util.Date Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(10, Date.getTime());
        }
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, Appointment entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String Subject = entity.getSubject();
		if (Subject != null) {
			stmt.bindString(2, Subject);
		}

		String Body = entity.getBody();
		if (Body != null) {
			stmt.bindString(3, Body);
		}

		String Start = entity.getStart();
		if (Start != null) {
			stmt.bindString(4, Start);
		}

		String End = entity.getEnd();
		if (End != null) {
			stmt.bindString(5, End);
		}

		String Place = entity.getPlace();
		if (Place != null) {
			stmt.bindString(6, Place);
		}

		String ID = entity.getID();
		if (ID != null) {
			stmt.bindString(7, ID);
		}

		String Status = entity.getStatus();
		if (Status != null) {
			stmt.bindString(8, Status);
		}

		Integer UserIsOwner = entity.getUserIsOwner();
		if (UserIsOwner != null) {
			stmt.bindLong(9, UserIsOwner);
		}

		java.util.Date Date = entity.getDate();
		if (Date != null) {
			stmt.bindLong(10, Date.getTime());
		}
	}

	@Override
	protected final void attachEntity(Appointment entity) {
		super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Appointment readEntity(Cursor cursor, int offset) {
        Appointment entity = new Appointment( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Subject
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Body
		        cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Start
		        cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // End
		        cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Place
		        cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ID
		        cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Status
		        cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // UserIsOwner
		        cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // Date
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Appointment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubject(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBody(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStart(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlace(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserIsOwner(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
    }

	@Override
	protected final Long updateKeyAfterInsert(Appointment entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(Appointment entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(Appointment entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
    }

    /**
     * Properties of entity Appointment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Subject = new Property(1, String.class, "Subject", false, "SUBJECT");
        public final static Property Body = new Property(2, String.class, "Body", false, "BODY");
        public final static Property Start = new Property(3, String.class, "Start", false, "START");
        public final static Property End = new Property(4, String.class, "End", false, "END");
        public final static Property Place = new Property(5, String.class, "Place", false, "PLACE");
        public final static Property ID = new Property(6, String.class, "ID", false, "ID");
        public final static Property Status = new Property(7, String.class, "Status", false, "STATUS");
        public final static Property UserIsOwner = new Property(8, Integer.class, "UserIsOwner", false, "USER_IS_OWNER");
        public final static Property Date = new Property(9, java.util.Date.class, "Date", false, "DATE");
    }
    
}
