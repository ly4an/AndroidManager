package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TASK".
 */
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    public TaskDao(DaoConfig config) {
        super(config);
    }


    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACT_UID\" TEXT," + // 1: ActUID
                "\"CLIENT_ID\" INTEGER," + // 2: ClientID
                "\"ACCOUNT_ID\" INTEGER," + // 3: AccountID
                "\"DUE_DATE\" INTEGER," + // 4: DueDate
                "\"EXECUTOR_LOGIN\" TEXT," + // 5: ExecutorLogin
                "\"RESULT\" TEXT," + // 6: Result
                "\"STATUS\" TEXT," + // 7: Status
                "\"SUBJECT\" TEXT," + // 8: Subject
                "\"TEXT\" TEXT," + // 9: Text
                "\"TYPE_ID\" INTEGER," + // 10: TypeID
                "\"VID_ID\" INTEGER," + // 11: VidID
                "\"TASK_UID\" TEXT," + // 12: TaskUID
                "\"CREATED_ON\" INTEGER," + // 13: CreatedOn
                "\"SERVICE_TYPE_UID\" TEXT," + // 14: ServiceTypeUID
                "\"POT_SELL_NUMBER\" INTEGER," + // 15: PotSellNumber
                "\"CONTACT_ID\" INTEGER," + // 16: ContactID
                "\"CONTROL_COMMENT\" TEXT," + // 17: ControlComment
                "\"CHANGED\" INTEGER);"); // 18: Changed
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, Task entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String ActUID = entity.getActUID();
        if (ActUID != null) {
            stmt.bindString(2, ActUID);
        }

        Integer ClientID = entity.getClientID();
        if (ClientID != null) {
            stmt.bindLong(3, ClientID);
        }

        Integer AccountID = entity.getAccountID();
        if (AccountID != null) {
            stmt.bindLong(4, AccountID);
        }

        java.util.Date DueDate = entity.getDueDate();
        if (DueDate != null) {
            stmt.bindLong(5, DueDate.getTime());
        }

        String ExecutorLogin = entity.getExecutorLogin();
        if (ExecutorLogin != null) {
            stmt.bindString(6, ExecutorLogin);
        }

        String Result = entity.getResult();
        if (Result != null) {
            stmt.bindString(7, Result);
        }

        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(8, Status);
        }

        String Subject = entity.getSubject();
        if (Subject != null) {
            stmt.bindString(9, Subject);
        }

        String Text = entity.getText();
        if (Text != null) {
            stmt.bindString(10, Text);
        }

        Integer TypeID = entity.getTypeID();
        if (TypeID != null) {
            stmt.bindLong(11, TypeID);
        }

        Integer VidID = entity.getVidID();
        if (VidID != null) {
            stmt.bindLong(12, VidID);
        }

        String TaskUID = entity.getTaskUID();
        if (TaskUID != null) {
            stmt.bindString(13, TaskUID);
        }

        java.util.Date CreatedOn = entity.getCreatedOn();
        if (CreatedOn != null) {
            stmt.bindLong(14, CreatedOn.getTime());
        }

        String ServiceTypeUID = entity.getServiceTypeUID();
        if (ServiceTypeUID != null) {
            stmt.bindString(15, ServiceTypeUID);
        }

        Integer PotSellNumber = entity.getPotSellNumber();
        if (PotSellNumber != null) {
            stmt.bindLong(16, PotSellNumber);
        }

        Integer ContactID = entity.getContactID();
        if (ContactID != null) {
            stmt.bindLong(17, ContactID);
        }

        String ControlComment = entity.getControlComment();
        if (ControlComment != null) {
            stmt.bindString(18, ControlComment);
        }

        Boolean Changed = entity.getChanged();
		if (Changed != null) {
			stmt.bindLong(19, Changed ? 1L: 0L);
		}
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, Task entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String ActUID = entity.getActUID();
		if (ActUID != null) {
			stmt.bindString(2, ActUID);
		}

		Integer ClientID = entity.getClientID();
		if (ClientID != null) {
			stmt.bindLong(3, ClientID);
		}

		Integer AccountID = entity.getAccountID();
		if (AccountID != null) {
			stmt.bindLong(4, AccountID);
		}

		java.util.Date DueDate = entity.getDueDate();
		if (DueDate != null) {
			stmt.bindLong(5, DueDate.getTime());
		}

		String ExecutorLogin = entity.getExecutorLogin();
		if (ExecutorLogin != null) {
			stmt.bindString(6, ExecutorLogin);
		}

		String Result = entity.getResult();
		if (Result != null) {
			stmt.bindString(7, Result);
		}

		String Status = entity.getStatus();
		if (Status != null) {
			stmt.bindString(8, Status);
		}

		String Subject = entity.getSubject();
		if (Subject != null) {
			stmt.bindString(9, Subject);
		}

		String Text = entity.getText();
		if (Text != null) {
			stmt.bindString(10, Text);
		}

		Integer TypeID = entity.getTypeID();
		if (TypeID != null) {
			stmt.bindLong(11, TypeID);
		}

		Integer VidID = entity.getVidID();
		if (VidID != null) {
			stmt.bindLong(12, VidID);
		}

		String TaskUID = entity.getTaskUID();
		if (TaskUID != null) {
			stmt.bindString(13, TaskUID);
		}

		java.util.Date CreatedOn = entity.getCreatedOn();
		if (CreatedOn != null) {
			stmt.bindLong(14, CreatedOn.getTime());
		}

		String ServiceTypeUID = entity.getServiceTypeUID();
		if (ServiceTypeUID != null) {
			stmt.bindString(15, ServiceTypeUID);
		}

		Integer PotSellNumber = entity.getPotSellNumber();
		if (PotSellNumber != null) {
			stmt.bindLong(16, PotSellNumber);
		}

		Integer ContactID = entity.getContactID();
		if (ContactID != null) {
			stmt.bindLong(17, ContactID);
		}

		String ControlComment = entity.getControlComment();
		if (ControlComment != null) {
			stmt.bindString(18, ControlComment);
		}

		Boolean Changed = entity.getChanged();
		if (Changed != null) {
			stmt.bindLong(19, Changed ? 1L : 0L);
		}
	}

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ActUID
		        cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ClientID
		        cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // AccountID
		        cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // DueDate
		        cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ExecutorLogin
		        cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Result
		        cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Status
		        cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Subject
		        cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Text
		        cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // TypeID
		        cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // VidID
		        cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // TaskUID
		        cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // CreatedOn
		        cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ServiceTypeUID
		        cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // PotSellNumber
		        cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // ContactID
		        cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ControlComment
		        cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0 // Changed
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClientID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAccountID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDueDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setExecutorLogin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResult(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubject(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setText(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTypeID(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setVidID(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTaskUID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreatedOn(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setServiceTypeUID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPotSellNumber(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setContactID(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setControlComment(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setChanged(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
    }

	@Override
	protected final Long updateKeyAfterInsert(Task entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(Task entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
    }

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ActUID = new Property(1, String.class, "ActUID", false, "ACT_UID");
        public final static Property ClientID = new Property(2, Integer.class, "ClientID", false, "CLIENT_ID");
        public final static Property AccountID = new Property(3, Integer.class, "AccountID", false, "ACCOUNT_ID");
        public final static Property DueDate = new Property(4, java.util.Date.class, "DueDate", false, "DUE_DATE");
        public final static Property ExecutorLogin = new Property(5, String.class, "ExecutorLogin", false, "EXECUTOR_LOGIN");
        public final static Property Result = new Property(6, String.class, "Result", false, "RESULT");
        public final static Property Status = new Property(7, String.class, "Status", false, "STATUS");
        public final static Property Subject = new Property(8, String.class, "Subject", false, "SUBJECT");
        public final static Property Text = new Property(9, String.class, "Text", false, "TEXT");
        public final static Property TypeID = new Property(10, Integer.class, "TypeID", false, "TYPE_ID");
        public final static Property VidID = new Property(11, Integer.class, "VidID", false, "VID_ID");
        public final static Property TaskUID = new Property(12, String.class, "TaskUID", false, "TASK_UID");
        public final static Property CreatedOn = new Property(13, java.util.Date.class, "CreatedOn", false, "CREATED_ON");
        public final static Property ServiceTypeUID = new Property(14, String.class, "ServiceTypeUID", false, "SERVICE_TYPE_UID");
        public final static Property PotSellNumber = new Property(15, Integer.class, "PotSellNumber", false, "POT_SELL_NUMBER");
        public final static Property ContactID = new Property(16, Integer.class, "ContactID", false, "CONTACT_ID");
        public final static Property ControlComment = new Property(17, String.class, "ControlComment", false, "CONTROL_COMMENT");
        public final static Property Changed = new Property(18, Boolean.class, "Changed", false, "CHANGED");
    }
    
}
