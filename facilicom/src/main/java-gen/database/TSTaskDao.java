package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TSTASK".
 */
public class TSTaskDao extends AbstractDao<TSTask, Long> {

    public static final String TABLENAME = "TSTASK";

    public TSTaskDao(DaoConfig config) {
        super(config);
    }


    public TSTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"TSTASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID\" TEXT," + // 1: ID
                "\"TITLE\" TEXT," + // 2: Title
                "\"DETAILED_RESULT\" TEXT," + // 3: DetailedResult
                "\"DUE_DATE\" TEXT," + // 4: DueDate
                "\"CLIENT_NAME\" TEXT," + // 5: ClientName
                "\"ACCOUNT_NAME\" TEXT," + // 6: AccountName
                "\"ACCOUNT_ADDRESS\" TEXT," + // 7: AccountAddress
                "\"CONTACT_NAME\" TEXT," + // 8: ContactName
                "\"EXECUTOR\" TEXT," + // 9: Executor
                "\"STATUS\" TEXT," + // 10: Status
                "\"CONTROL_COMMENT\" TEXT," + // 11: ControlComment
                "\"AUTHOR\" TEXT);"); // 12: Author
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TSTASK\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, TSTask entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }

        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }

        String DetailedResult = entity.getDetailedResult();
        if (DetailedResult != null) {
            stmt.bindString(4, DetailedResult);
        }

        String DueDate = entity.getDueDate();
        if (DueDate != null) {
            stmt.bindString(5, DueDate);
        }

        String ClientName = entity.getClientName();
        if (ClientName != null) {
            stmt.bindString(6, ClientName);
        }

        String AccountName = entity.getAccountName();
        if (AccountName != null) {
            stmt.bindString(7, AccountName);
        }

        String AccountAddress = entity.getAccountAddress();
        if (AccountAddress != null) {
            stmt.bindString(8, AccountAddress);
        }

        String ContactName = entity.getContactName();
        if (ContactName != null) {
            stmt.bindString(9, ContactName);
        }

        String Executor = entity.getExecutor();
        if (Executor != null) {
            stmt.bindString(10, Executor);
        }

        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(11, Status);
        }

        String ControlComment = entity.getControlComment();
        if (ControlComment != null) {
            stmt.bindString(12, ControlComment);
        }

        String Author = entity.getAuthor();
        if (Author != null) {
            stmt.bindString(13, Author);
        }
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, TSTask entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String ID = entity.getID();
		if (ID != null) {
			stmt.bindString(2, ID);
		}

		String Title = entity.getTitle();
		if (Title != null) {
			stmt.bindString(3, Title);
		}

		String DetailedResult = entity.getDetailedResult();
		if (DetailedResult != null) {
			stmt.bindString(4, DetailedResult);
		}

		String DueDate = entity.getDueDate();
		if (DueDate != null) {
			stmt.bindString(5, DueDate);
		}

		String ClientName = entity.getClientName();
		if (ClientName != null) {
			stmt.bindString(6, ClientName);
		}

		String AccountName = entity.getAccountName();
		if (AccountName != null) {
			stmt.bindString(7, AccountName);
		}

		String AccountAddress = entity.getAccountAddress();
		if (AccountAddress != null) {
			stmt.bindString(8, AccountAddress);
		}

		String ContactName = entity.getContactName();
		if (ContactName != null) {
			stmt.bindString(9, ContactName);
		}

		String Executor = entity.getExecutor();
		if (Executor != null) {
			stmt.bindString(10, Executor);
		}

		String Status = entity.getStatus();
		if (Status != null) {
			stmt.bindString(11, Status);
		}

		String ControlComment = entity.getControlComment();
		if (ControlComment != null) {
			stmt.bindString(12, ControlComment);
		}

		String Author = entity.getAuthor();
		if (Author != null) {
			stmt.bindString(13, Author);
		}
	}

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public TSTask readEntity(Cursor cursor, int offset) {
        TSTask entity = new TSTask( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ID
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Title
		        cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DetailedResult
		        cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DueDate
		        cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ClientName
		        cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // AccountName
		        cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // AccountAddress
		        cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ContactName
		        cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Executor
		        cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Status
		        cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ControlComment
		        cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // Author
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, TSTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDetailedResult(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDueDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClientName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccountName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccountAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContactName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExecutor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setControlComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAuthor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
    }

	@Override
	protected final Long updateKeyAfterInsert(TSTask entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(TSTask entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(TSTask entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
    }

    /**
     * Properties of entity TSTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property Title = new Property(2, String.class, "Title", false, "TITLE");
        public final static Property DetailedResult = new Property(3, String.class, "DetailedResult", false, "DETAILED_RESULT");
        public final static Property DueDate = new Property(4, String.class, "DueDate", false, "DUE_DATE");
        public final static Property ClientName = new Property(5, String.class, "ClientName", false, "CLIENT_NAME");
        public final static Property AccountName = new Property(6, String.class, "AccountName", false, "ACCOUNT_NAME");
        public final static Property AccountAddress = new Property(7, String.class, "AccountAddress", false, "ACCOUNT_ADDRESS");
        public final static Property ContactName = new Property(8, String.class, "ContactName", false, "CONTACT_NAME");
        public final static Property Executor = new Property(9, String.class, "Executor", false, "EXECUTOR");
        public final static Property Status = new Property(10, String.class, "Status", false, "STATUS");
        public final static Property ControlComment = new Property(11, String.class, "ControlComment", false, "CONTROL_COMMENT");
        public final static Property Author = new Property(12, String.class, "Author", false, "AUTHOR");
    }
    
}
