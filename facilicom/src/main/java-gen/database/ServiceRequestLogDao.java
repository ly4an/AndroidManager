package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SERVICE_REQUEST_LOG".
 */
public class ServiceRequestLogDao extends AbstractDao<ServiceRequestLog, Long> {

    public static final String TABLENAME = "SERVICE_REQUEST_LOG";
    private Query<ServiceRequestLog> serviceRequest_LogQuery;

    public ServiceRequestLogDao(DaoConfig config) {
        super(config);
    }

    public ServiceRequestLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"SERVICE_REQUEST_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SERVICE_REQUEST_ID\" INTEGER," + // 1: ServiceRequestID
                "\"STATUS_SET_ON\" TEXT," + // 2: StatusSetOn
                "\"STATUS\" TEXT," + // 3: Status
                "\"STATUS_SET_BY_FULL_NAME\" TEXT," + // 4: StatusSetByFullName
                "\"COMMENT\" TEXT);"); // 5: Comment
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVICE_REQUEST_LOG\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, ServiceRequestLog entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long ServiceRequestID = entity.getServiceRequestID();
        if (ServiceRequestID != null) {
            stmt.bindLong(2, ServiceRequestID);
        }

        String StatusSetOn = entity.getStatusSetOn();
        if (StatusSetOn != null) {
            stmt.bindString(3, StatusSetOn);
        }

        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(4, Status);
        }

        String StatusSetByFullName = entity.getStatusSetByFullName();
        if (StatusSetByFullName != null) {
            stmt.bindString(5, StatusSetByFullName);
        }

        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(6, Comment);
        }
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, ServiceRequestLog entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Long ServiceRequestID = entity.getServiceRequestID();
		if (ServiceRequestID != null) {
			stmt.bindLong(2, ServiceRequestID);
		}

		String StatusSetOn = entity.getStatusSetOn();
		if (StatusSetOn != null) {
			stmt.bindString(3, StatusSetOn);
		}

		String Status = entity.getStatus();
		if (Status != null) {
			stmt.bindString(4, Status);
		}

		String StatusSetByFullName = entity.getStatusSetByFullName();
		if (StatusSetByFullName != null) {
			stmt.bindString(5, StatusSetByFullName);
		}

		String Comment = entity.getComment();
		if (Comment != null) {
			stmt.bindString(6, Comment);
		}
	}

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public ServiceRequestLog readEntity(Cursor cursor, int offset) {
        ServiceRequestLog entity = new ServiceRequestLog( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ServiceRequestID
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StatusSetOn
		        cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Status
		        cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // StatusSetByFullName
		        cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Comment
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ServiceRequestLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServiceRequestID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStatusSetOn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatusSetByFullName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setComment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

	@Override
	protected final Long updateKeyAfterInsert(ServiceRequestLog entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(ServiceRequestLog entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(ServiceRequestLog entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
	}

	/** Internal query to resolve the "Log" to-many relationship of ServiceRequest. */
	public List<ServiceRequestLog> _queryServiceRequest_Log(Long ServiceRequestID) {
        synchronized (this) {
            if (serviceRequest_LogQuery == null) {
                QueryBuilder<ServiceRequestLog> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ServiceRequestID.eq(null));
                serviceRequest_LogQuery = queryBuilder.build();
            }
        }
        Query<ServiceRequestLog> query = serviceRequest_LogQuery.forCurrentThread();
        query.setParameter(0, ServiceRequestID);
        return query.list();
    }
    
    /**
     * Properties of entity ServiceRequestLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServiceRequestID = new Property(1, Long.class, "ServiceRequestID", false, "SERVICE_REQUEST_ID");
        public final static Property StatusSetOn = new Property(2, String.class, "StatusSetOn", false, "STATUS_SET_ON");
        public final static Property Status = new Property(3, String.class, "Status", false, "STATUS");
        public final static Property StatusSetByFullName = new Property(4, String.class, "StatusSetByFullName", false, "STATUS_SET_BY_FULL_NAME");
        public final static Property Comment = new Property(5, String.class, "Comment", false, "COMMENT");
    }

}
