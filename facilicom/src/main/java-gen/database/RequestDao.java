package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "REQUEST".
 */
public class RequestDao extends AbstractDao<Request, Long> {

    public static final String TABLENAME = "REQUEST";

    public RequestDao(DaoConfig config) {
        super(config);
    }


    public RequestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"REQUEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"INTERNAL_SERVICE_REQUEST_ID\" INTEGER," + // 1: InternalServiceRequestID
                "\"SERVICE_REQUEST_UID\" TEXT," + // 2: ServiceRequestUID
                "\"CLIENT_ID\" INTEGER," + // 3: ClientID
                "\"DIRECTUM_ID\" INTEGER," + // 4: DirectumID
                "\"SERVICE_TYPE_UID\" TEXT," + // 5: ServiceTypeUID
                "\"WORK_TYPE_UID\" TEXT," + // 6: WorkTypeUID
                "\"URGENCY_TYPE_NAME\" TEXT," + // 7: UrgencyTypeName
                "\"CLEANING_REASON_ID\" INTEGER," + // 8: CleaningReasonID
                "\"CONTENT\" TEXT," + // 9: Content
                "\"DESIRED_DATE\" INTEGER," + // 10: DesiredDate
                "\"COMMENT\" TEXT," + // 11: Comment
                "\"TYPE\" TEXT," + // 12: Type
                "\"ARRIVAL_TIME_REQUIRED\" INTEGER," + // 13: ArrivalTimeRequired
                "\"CHANGED\" INTEGER);"); // 14: Changed
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REQUEST\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, Request entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer InternalServiceRequestID = entity.getInternalServiceRequestID();
        if (InternalServiceRequestID != null) {
            stmt.bindLong(2, InternalServiceRequestID);
        }

        String ServiceRequestUID = entity.getServiceRequestUID();
        if (ServiceRequestUID != null) {
            stmt.bindString(3, ServiceRequestUID);
        }

        Integer ClientID = entity.getClientID();
        if (ClientID != null) {
            stmt.bindLong(4, ClientID);
        }

        Integer DirectumID = entity.getDirectumID();
        if (DirectumID != null) {
            stmt.bindLong(5, DirectumID);
        }

        String ServiceTypeUID = entity.getServiceTypeUID();
        if (ServiceTypeUID != null) {
            stmt.bindString(6, ServiceTypeUID);
        }

        String WorkTypeUID = entity.getWorkTypeUID();
        if (WorkTypeUID != null) {
            stmt.bindString(7, WorkTypeUID);
        }

        String UrgencyTypeName = entity.getUrgencyTypeName();
        if (UrgencyTypeName != null) {
            stmt.bindString(8, UrgencyTypeName);
        }

        Integer CleaningReasonID = entity.getCleaningReasonID();
        if (CleaningReasonID != null) {
            stmt.bindLong(9, CleaningReasonID);
        }

        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(10, Content);
        }

        java.util.Date DesiredDate = entity.getDesiredDate();
        if (DesiredDate != null) {
            stmt.bindLong(11, DesiredDate.getTime());
        }

        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(12, Comment);
        }

        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(13, Type);
        }

        Integer ArrivalTimeRequired = entity.getArrivalTimeRequired();
        if (ArrivalTimeRequired != null) {
            stmt.bindLong(14, ArrivalTimeRequired);
        }

        Boolean Changed = entity.getChanged();
		if (Changed != null) {
			stmt.bindLong(15, Changed ? 1L: 0L);
		}
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, Request entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Integer InternalServiceRequestID = entity.getInternalServiceRequestID();
		if (InternalServiceRequestID != null) {
			stmt.bindLong(2, InternalServiceRequestID);
		}

		String ServiceRequestUID = entity.getServiceRequestUID();
		if (ServiceRequestUID != null) {
			stmt.bindString(3, ServiceRequestUID);
		}

		Integer ClientID = entity.getClientID();
		if (ClientID != null) {
			stmt.bindLong(4, ClientID);
		}

		Integer DirectumID = entity.getDirectumID();
		if (DirectumID != null) {
			stmt.bindLong(5, DirectumID);
		}

		String ServiceTypeUID = entity.getServiceTypeUID();
		if (ServiceTypeUID != null) {
			stmt.bindString(6, ServiceTypeUID);
		}

		String WorkTypeUID = entity.getWorkTypeUID();
		if (WorkTypeUID != null) {
			stmt.bindString(7, WorkTypeUID);
		}

		String UrgencyTypeName = entity.getUrgencyTypeName();
		if (UrgencyTypeName != null) {
			stmt.bindString(8, UrgencyTypeName);
		}

		Integer CleaningReasonID = entity.getCleaningReasonID();
		if (CleaningReasonID != null) {
			stmt.bindLong(9, CleaningReasonID);
		}

		String Content = entity.getContent();
		if (Content != null) {
			stmt.bindString(10, Content);
		}

		java.util.Date DesiredDate = entity.getDesiredDate();
		if (DesiredDate != null) {
			stmt.bindLong(11, DesiredDate.getTime());
		}

		String Comment = entity.getComment();
		if (Comment != null) {
			stmt.bindString(12, Comment);
		}

		String Type = entity.getType();
		if (Type != null) {
			stmt.bindString(13, Type);
		}

		Integer ArrivalTimeRequired = entity.getArrivalTimeRequired();
		if (ArrivalTimeRequired != null) {
			stmt.bindLong(14, ArrivalTimeRequired);
		}

		Boolean Changed = entity.getChanged();
		if (Changed != null) {
			stmt.bindLong(15, Changed ? 1L : 0L);
		}
	}

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Request readEntity(Cursor cursor, int offset) {
        Request entity = new Request( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // InternalServiceRequestID
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ServiceRequestUID
		        cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ClientID
		        cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // DirectumID
		        cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ServiceTypeUID
		        cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // WorkTypeUID
		        cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UrgencyTypeName
		        cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // CleaningReasonID
		        cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Content
		        cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // DesiredDate
		        cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Comment
		        cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Type
		        cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // ArrivalTimeRequired
		        cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0 // Changed
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Request entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInternalServiceRequestID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setServiceRequestUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClientID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDirectumID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setServiceTypeUID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWorkTypeUID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrgencyTypeName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCleaningReasonID(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDesiredDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setArrivalTimeRequired(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setChanged(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
    }

	@Override
	protected final Long updateKeyAfterInsert(Request entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(Request entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(Request entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
    }

    /**
     * Properties of entity Request.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InternalServiceRequestID = new Property(1, Integer.class, "InternalServiceRequestID", false, "INTERNAL_SERVICE_REQUEST_ID");
        public final static Property ServiceRequestUID = new Property(2, String.class, "ServiceRequestUID", false, "SERVICE_REQUEST_UID");
        public final static Property ClientID = new Property(3, Integer.class, "ClientID", false, "CLIENT_ID");
        public final static Property DirectumID = new Property(4, Integer.class, "DirectumID", false, "DIRECTUM_ID");
        public final static Property ServiceTypeUID = new Property(5, String.class, "ServiceTypeUID", false, "SERVICE_TYPE_UID");
        public final static Property WorkTypeUID = new Property(6, String.class, "WorkTypeUID", false, "WORK_TYPE_UID");
        public final static Property UrgencyTypeName = new Property(7, String.class, "UrgencyTypeName", false, "URGENCY_TYPE_NAME");
        public final static Property CleaningReasonID = new Property(8, Integer.class, "CleaningReasonID", false, "CLEANING_REASON_ID");
        public final static Property Content = new Property(9, String.class, "Content", false, "CONTENT");
        public final static Property DesiredDate = new Property(10, java.util.Date.class, "DesiredDate", false, "DESIRED_DATE");
        public final static Property Comment = new Property(11, String.class, "Comment", false, "COMMENT");
        public final static Property Type = new Property(12, String.class, "Type", false, "TYPE");
        public final static Property ArrivalTimeRequired = new Property(13, Integer.class, "ArrivalTimeRequired", false, "ARRIVAL_TIME_REQUIRED");
        public final static Property Changed = new Property(14, Boolean.class, "Changed", false, "CHANGED");
    }
    
}
