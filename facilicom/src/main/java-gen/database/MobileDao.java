package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MOBILE".
 */
public class MobileDao extends AbstractDao<Mobile, Long> {

    public static final String TABLENAME = "MOBILE";

    public MobileDao(DaoConfig config) {
        super(config);
    }


    public MobileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"MOBILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MOBILE_ID\" INTEGER," + // 1: mobileId
                "\"JSON\" TEXT," + // 2: json
                "\"SEND\" INTEGER);"); // 3: send
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOBILE\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, Mobile entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer mobileId = entity.getMobileId();
        if (mobileId != null) {
            stmt.bindLong(2, mobileId);
        }

        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(3, json);
        }

        Boolean send = entity.getSend();
		if (send != null) {
			stmt.bindLong(4, send ? 1L: 0L);
		}
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, Mobile entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Integer mobileId = entity.getMobileId();
		if (mobileId != null) {
			stmt.bindLong(2, mobileId);
		}

		String json = entity.getJson();
		if (json != null) {
			stmt.bindString(3, json);
		}

		Boolean send = entity.getSend();
		if (send != null) {
			stmt.bindLong(4, send ? 1L : 0L);
		}
	}

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Mobile readEntity(Cursor cursor, int offset) {
        Mobile entity = new Mobile( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // mobileId
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // json
		        cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // send
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Mobile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMobileId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setJson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSend(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
    }

	@Override
	protected final Long updateKeyAfterInsert(Mobile entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(Mobile entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(Mobile entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
    }

    /**
     * Properties of entity Mobile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MobileId = new Property(1, Integer.class, "mobileId", false, "MOBILE_ID");
        public final static Property Json = new Property(2, String.class, "json", false, "JSON");
        public final static Property Send = new Property(3, Boolean.class, "send", false, "SEND");
    }
    
}
