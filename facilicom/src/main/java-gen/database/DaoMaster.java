package database;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 59): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
	public static final int SCHEMA_VERSION = 59;

    public DaoMaster(SQLiteDatabase db) {
	    this(new StandardDatabase(db));
    }

	public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ActTypeDao.class);
        registerDaoClass(ActReasonDao.class);
        registerDaoClass(ContactClientDao.class);
        registerDaoClass(ContactAccountDao.class);
        registerDaoClass(ClientDao.class);
        registerDaoClass(ActAccountDao.class);
        registerDaoClass(ActServiceTypeDao.class);
        registerDaoClass(ActContactDao.class);
        registerDaoClass(NomenclatureGroupDao.class);
        registerDaoClass(MobileDao.class);
        registerDaoClass(PartTimeDao.class);
        registerDaoClass(ScheduleDao.class);
        registerDaoClass(VidTaskDao.class);
        registerDaoClass(TaskEmployeeDao.class);
        registerDaoClass(CountryDao.class);
        registerDaoClass(PersonDao.class);
        registerDaoClass(PersonPhotoDao.class);
        registerDaoClass(TaskDao.class);
        registerDaoClass(TSTaskDao.class);
        registerDaoClass(CheckInLogDao.class);
        registerDaoClass(RequestDao.class);
        registerDaoClass(RequestPhotoDao.class);
        registerDaoClass(ServiceRequestServantDao.class);
        registerDaoClass(ServiceRequestLogDao.class);
        registerDaoClass(ServiceRequestFileDao.class);
        registerDaoClass(ServiceRequestPhotoDao.class);
        registerDaoClass(ServiceRequestDao.class);
        registerDaoClass(AppointmentAttenderDao.class);
        registerDaoClass(AppointmentDao.class);
        registerDaoClass(PotSellDao.class);
        registerDaoClass(WorkTypeDao.class);
        registerDaoClass(CleaningReasonDao.class);
        registerDaoClass(FacilityUrgencyTypeDao.class);
        registerDaoClass(FakeDao.class);
        registerDaoClass(OrioTypeDao.class);
        registerDaoClass(OrioArticleDao.class);
    }

	/**
	 * Creates underlying database table using DAOs.
	 */
	public static void createAllTables(Database db, boolean ifNotExists) {
		ActTypeDao.createTable(db, ifNotExists);
        ActReasonDao.createTable(db, ifNotExists);
        ContactClientDao.createTable(db, ifNotExists);
        ContactAccountDao.createTable(db, ifNotExists);
        ClientDao.createTable(db, ifNotExists);
        ActAccountDao.createTable(db, ifNotExists);
        ActServiceTypeDao.createTable(db, ifNotExists);
        ActContactDao.createTable(db, ifNotExists);
        NomenclatureGroupDao.createTable(db, ifNotExists);
        MobileDao.createTable(db, ifNotExists);
        PartTimeDao.createTable(db, ifNotExists);
        ScheduleDao.createTable(db, ifNotExists);
        VidTaskDao.createTable(db, ifNotExists);
        TaskEmployeeDao.createTable(db, ifNotExists);
        CountryDao.createTable(db, ifNotExists);
        PersonDao.createTable(db, ifNotExists);
        PersonPhotoDao.createTable(db, ifNotExists);
        TaskDao.createTable(db, ifNotExists);
        TSTaskDao.createTable(db, ifNotExists);
        CheckInLogDao.createTable(db, ifNotExists);
        RequestDao.createTable(db, ifNotExists);
        RequestPhotoDao.createTable(db, ifNotExists);
        ServiceRequestServantDao.createTable(db, ifNotExists);
        ServiceRequestLogDao.createTable(db, ifNotExists);
        ServiceRequestFileDao.createTable(db, ifNotExists);
        ServiceRequestPhotoDao.createTable(db, ifNotExists);
        ServiceRequestDao.createTable(db, ifNotExists);
        AppointmentAttenderDao.createTable(db, ifNotExists);
        AppointmentDao.createTable(db, ifNotExists);
        PotSellDao.createTable(db, ifNotExists);
        WorkTypeDao.createTable(db, ifNotExists);
        CleaningReasonDao.createTable(db, ifNotExists);
        FacilityUrgencyTypeDao.createTable(db, ifNotExists);
        FakeDao.createTable(db, ifNotExists);
        OrioTypeDao.createTable(db, ifNotExists);
        OrioArticleDao.createTable(db, ifNotExists);
	}

	/**
	 * Drops underlying database table using DAOs.
	 */
	public static void dropAllTables(Database db, boolean ifExists) {
		ActTypeDao.dropTable(db, ifExists);
        ActReasonDao.dropTable(db, ifExists);
        ContactClientDao.dropTable(db, ifExists);
        ContactAccountDao.dropTable(db, ifExists);
        ClientDao.dropTable(db, ifExists);
        ActAccountDao.dropTable(db, ifExists);
        ActServiceTypeDao.dropTable(db, ifExists);
        ActContactDao.dropTable(db, ifExists);
        NomenclatureGroupDao.dropTable(db, ifExists);
        MobileDao.dropTable(db, ifExists);
        PartTimeDao.dropTable(db, ifExists);
        ScheduleDao.dropTable(db, ifExists);
        VidTaskDao.dropTable(db, ifExists);
        TaskEmployeeDao.dropTable(db, ifExists);
        CountryDao.dropTable(db, ifExists);
        PersonDao.dropTable(db, ifExists);
        PersonPhotoDao.dropTable(db, ifExists);
        TaskDao.dropTable(db, ifExists);
        TSTaskDao.dropTable(db, ifExists);
        CheckInLogDao.dropTable(db, ifExists);
        RequestDao.dropTable(db, ifExists);
        RequestPhotoDao.dropTable(db, ifExists);
        ServiceRequestServantDao.dropTable(db, ifExists);
        ServiceRequestLogDao.dropTable(db, ifExists);
        ServiceRequestFileDao.dropTable(db, ifExists);
        ServiceRequestPhotoDao.dropTable(db, ifExists);
        ServiceRequestDao.dropTable(db, ifExists);
        AppointmentAttenderDao.dropTable(db, ifExists);
        AppointmentDao.dropTable(db, ifExists);
        PotSellDao.dropTable(db, ifExists);
        WorkTypeDao.dropTable(db, ifExists);
        CleaningReasonDao.dropTable(db, ifExists);
        FacilityUrgencyTypeDao.dropTable(db, ifExists);
        FakeDao.dropTable(db, ifExists);
        OrioTypeDao.dropTable(db, ifExists);
        OrioArticleDao.dropTable(db, ifExists);
	}

	/**
	 * WARNING: Drops all table on Upgrade! Use only during development.
	 * Convenience method using a {@link DevOpenHelper}.
	 */
	public static DaoSession newDevSession(Context context, String name) {
		Database db = new DevOpenHelper(context, name).getWritableDb();
		DaoMaster daoMaster = new DaoMaster(db);
		return daoMaster.newSession();
	}

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

	/**
	 * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
	 */
	public static abstract class OpenHelper extends DatabaseOpenHelper {
		public OpenHelper(Context context, String name) {
			super(context, name, SCHEMA_VERSION);
		}

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

		@Override
		public void onCreate(Database db) {
			Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
		}
	}

	/** WARNING: Drops all table on Upgrade! Use only during development. */
	public static class DevOpenHelper extends OpenHelper {
		public DevOpenHelper(Context context, String name) {
			super(context, name);
		}

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

		@Override
		public void onUpgrade(Database db, int oldVersion, int newVersion) {
			Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
