package database;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.ToMany;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "APPOINTMENT".
 */
@Entity(active = true)
public class Appointment {

	@Id
	private Long id;
    private String Subject;
    private String Body;
    private String Start;
    private String End;
    private String Place;
    private String ID;
    private String Status;
    private Integer UserIsOwner;
    private java.util.Date Date;

	/**
	 * Used to resolve relations
	 */
	@Generated
	private transient DaoSession daoSession;

	/**
	 * Used for active entity operations.
	 */
	@Generated
	private transient AppointmentDao myDao;

	@ToMany(joinProperties = {
			@JoinProperty(name = "id", referencedName = "AppointmentId")
	})
    private List<AppointmentAttender> Attenders;

    @Generated
    public Appointment() {
    }

    public Appointment(Long id) {
	    this.id = id;
    }

    @Generated
    public Appointment(Long id, String Subject, String Body, String Start, String End, String Place, String ID, String Status, Integer UserIsOwner, java.util.Date Date) {
        this.id = id;
        this.Subject = Subject;
        this.Body = Body;
        this.Start = Start;
        this.End = End;
        this.Place = Place;
        this.ID = ID;
        this.Status = Status;
        this.UserIsOwner = UserIsOwner;
        this.Date = Date;
    }

	/** called by internal mechanisms, do not call yourself. */
	@Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAppointmentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSubject() {
        return Subject;
    }

    public void setSubject(String Subject) {
        this.Subject = Subject;
    }

    public String getBody() {
        return Body;
    }

    public void setBody(String Body) {
        this.Body = Body;
    }

    public String getStart() {
        return Start;
    }

    public void setStart(String Start) {
        this.Start = Start;
    }

    public String getEnd() {
        return End;
    }

    public void setEnd(String End) {
        this.End = End;
    }

    public String getPlace() {
        return Place;
    }

    public void setPlace(String Place) {
        this.Place = Place;
    }

    public String getID() {
        return ID;
    }

    public void setID(String ID) {
        this.ID = ID;
    }

    public String getStatus() {
        return Status;
    }

    public void setStatus(String Status) {
        this.Status = Status;
    }

    public Integer getUserIsOwner() {
        return UserIsOwner;
    }

    public void setUserIsOwner(Integer UserIsOwner) {
        this.UserIsOwner = UserIsOwner;
    }

    public java.util.Date getDate() {
        return Date;
    }

    public void setDate(java.util.Date Date) {
        this.Date = Date;
    }

	/** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
	@Generated
    public List<AppointmentAttender> getAttenders() {
        if (Attenders == null) {
	        __throwIfDetached();
	        AppointmentAttenderDao targetDao = daoSession.getAppointmentAttenderDao();
            List<AppointmentAttender> AttendersNew = targetDao._queryAppointment_Attenders(id);
	        synchronized (this) {
		        if(Attenders == null) {
			        Attenders = AttendersNew;
                }
            }
        }
        return Attenders;
    }

	/** Resets a to-many relationship, making the next get call to query for a fresh result. */
	@Generated
    public synchronized void resetAttenders() {
        Attenders = null;
    }

	/**
	 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
	 * Entity must attached to an entity context.
	 */
    @Generated
    public void delete() {
	    __throwIfDetached();
	    myDao.delete(this);
    }

	/**
	 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
	 * Entity must attached to an entity context.
	 */
    @Generated
    public void update() {
	    __throwIfDetached();
	    myDao.update(this);
    }

	/**
	 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
	 * Entity must attached to an entity context.
	 */
    @Generated
    public void refresh() {
	    __throwIfDetached();
	    myDao.refresh(this);
    }

	@Generated
	private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
