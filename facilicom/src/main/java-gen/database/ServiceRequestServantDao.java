package database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SERVICE_REQUEST_SERVANT".
 */
public class ServiceRequestServantDao extends AbstractDao<ServiceRequestServant, Long> {

    public static final String TABLENAME = "SERVICE_REQUEST_SERVANT";
    private Query<ServiceRequestServant> serviceRequest_ServantsQuery;

    public ServiceRequestServantDao(DaoConfig config) {
        super(config);
    }

    public ServiceRequestServantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"SERVICE_REQUEST_SERVANT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SERVICE_REQUEST_ID\" INTEGER," + // 1: ServiceRequestID
                "\"NAME\" TEXT);"); // 2: Name
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVICE_REQUEST_SERVANT\"";
        db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, ServiceRequestServant entity) {
		stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long ServiceRequestID = entity.getServiceRequestID();
        if (ServiceRequestID != null) {
            stmt.bindLong(2, ServiceRequestID);
        }

        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, ServiceRequestServant entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Long ServiceRequestID = entity.getServiceRequestID();
		if (ServiceRequestID != null) {
			stmt.bindLong(2, ServiceRequestID);
		}

		String Name = entity.getName();
		if (Name != null) {
			stmt.bindString(3, Name);
		}
	}

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public ServiceRequestServant readEntity(Cursor cursor, int offset) {
        ServiceRequestServant entity = new ServiceRequestServant( //
		        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		        cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ServiceRequestID
		        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Name
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ServiceRequestServant entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServiceRequestID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

	@Override
	protected final Long updateKeyAfterInsert(ServiceRequestServant entity, long rowId) {
		entity.setId(rowId);
		return rowId;
    }
    
    @Override
    public Long getKey(ServiceRequestServant entity) {
	    if(entity != null) {
		    return entity.getId();
        } else {
            return null;
	    }
    }

	@Override
	public boolean hasKey(ServiceRequestServant entity) {
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable() {
		return true;
	}

	/** Internal query to resolve the "Servants" to-many relationship of ServiceRequest. */
	public List<ServiceRequestServant> _queryServiceRequest_Servants(Long ServiceRequestID) {
        synchronized (this) {
            if (serviceRequest_ServantsQuery == null) {
                QueryBuilder<ServiceRequestServant> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ServiceRequestID.eq(null));
                serviceRequest_ServantsQuery = queryBuilder.build();
            }
        }
        Query<ServiceRequestServant> query = serviceRequest_ServantsQuery.forCurrentThread();
        query.setParameter(0, ServiceRequestID);
        return query.list();
    }
    
    /**
     * Properties of entity ServiceRequestServant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServiceRequestID = new Property(1, Long.class, "ServiceRequestID", false, "SERVICE_REQUEST_ID");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
    }

}
